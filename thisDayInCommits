#! /usr/bin/env node

// TODO:
//   get fancy with dates - if commit technically falls on the next day (due to the hour cutoff), denote that somehow

var _ = require('lodash');
var commander = require('commander');
var async = require('async');
var chalk = require('chalk');

var core = require('thehelp-core');

var git = require('./src/git');
var util = require('./src/util');

commander
  .option('-d, --date <date>', 'Date to check (today, starting last year)',
    function(date) { return new Date(date); }, util.defaultDate())
  .option('-h, --hour <number>', 'Cutoff between days (2am)', parseInt, 2)
  .option('-c, --config <path>', 'Config file with your target repos (./info/repos.json)',
    './info/repos.json')
  .option('-u, --users <regex>', 'Regex to filter authors (result of `git config user.name`)',
    function(users) { return new RegExp(users); }, null)
  .parse(process.argv);

var now = new Date();
var date = commander.date;
var hour = commander.hour;
var repos = require(commander.config);

var exec = require('child_process').exec;

var getAuthorCheck = function(users, cb) {
  if (!users) {
    exec('git config user.name',function (err, stdout, stderr) {
      if (err) {
        return cb(err);
      }
      if (stderr && stderr.length) {
        return cb(new Error(stderr));
      }

      var username = stdout.trim();
      return cb(null, function(author) {
        return String(author) === username;
      });
    });
  }
  else {
    return cb(null, function(author) {
      return users.test(String(author));
    });
  }
};

var getRange = function getRange(date, hour) {
  var start = new Date(date.getFullYear(), date.getMonth(), date.getDate(), hour);
  var end = util.incrementDay(start, 1);

  return {
    start: start,
    end: end
  }
};

var addLineBreaks = function addLineBreaks(message, length) {
  var message = message.split('\n');

  return _(message)
    .map(function(line) {
      var chunks = [];
      while (line.length) {
        var chunk = line.slice(0, length)
        line = line.slice(length);

        var lastSpace = chunk.lastIndexOf(' ');
        if (lastSpace > 0 && chunk.length === 94) {
          line = chunk.slice(lastSpace + 1) + line;
          chunk = chunk.slice(0, lastSpace);
        }

        chunks.push(chunk);
      };
      return chunks;
    })
    .flatten()
    .join('\n');
};


var minYear = 2010;
var currentYear = date.getFullYear();
var earliestRange = getRange(util.setYear(date, minYear));
var yearsToCheck = [];
var excludedAuthors = {};

for (var year = currentYear; year >= minYear; year--) {
  yearsToCheck.push(year);
}

_.each(repos, function(repo) {
  repo.dates = _.map(yearsToCheck, function(year) {
    var day = util.setYear(date, year);
    var target = getRange(day, hour);

    target.day = day;
    target.prettyDay = util.shortDate(day);
    target.commits = [];

    return target;
  });
  return repo;
});

getAuthorCheck(commander.users, function(err, authorCheck) {
  if (err) {
    throw err;
  }

  var loadCommits = function loadCommits(repo, cb) {
    var end = function(commit) {
      var authored = commit.authored_date;
      return (authored.getTime() < earliestRange.start.getTime());
    };

    var checkAndAdd = function(commit) {
      var authored = commit.authored_date;

      for (var i = 0, max = repo.dates.length; i < max; i += 1) {
        var target = repo.dates[i];

        if (authored.getTime() >= target.start.getTime() &&
          authored.getTime() < target.end.getTime()) {

          if (!authorCheck(commit.author)) {
            excludedAuthors[commit.author + ' (' + repo.name + ')'] = true;
            break;
          }

          target.commits.push(commit);
        }
      };
    };

    git.getCommitsBetween(repo.location, checkAndAdd, end, cb);
  };

  async.map(repos, loadCommits, function(err) {
    if (err) {
      console.error('Top-level error!' + core.breadcrumbs.toString(err));
      process.exit(1);
    }

    var result = _(repos)
      .each(function(repo) {
        repo.dates = _.filter(repo.dates, function(dates) {
          return dates.commits.length;
        });
      })
      .filter(function(repo) {
        return repo.dates.length;
      })
      .map(function(repo) {
        var result = chalk.bold(repo.name) + ' (' + repo.location + ')';

        return result + _.map(repo.dates, function(date) {
          var length = date.commits.length;
          var commits = (length === 1 ? 'commit' : 'commits');
          var result = util.dayOfWeek(date.day) + ', ' + util.shortDate(date.day) +
            ' (' + length + ' ' + commits + '):';

          return '\n  ' + result + _(date.commits)
            .reverse()
            .map(function(commit) {
              var authored = commit.authored_date;
              var message = addLineBreaks(commit.message, 94);
              var message = message.replace(/\n/g, '\n      ');
              return '\n    ' + util.timePadded(authored) + ': ' + message;
            })
            .join('');
        })
        .join('');
      })
      .join('\n\n');

    console.log(result);
    console.log();

    var then = new Date();
    console.log('Runtime: ' + (then.getTime() - now.getTime()) + ' milliseconds');

    var authors = _(excludedAuthors).keys().join(', ');
    if (authors.length) {
      console.log('Excluded authors: ' + authors);
    }
  });
});
